boxfill.c:	Pixrect *igl_pr_pat;
boxfill.c:	Pixrect *igl_pr_pat;
boxfill.c:extern Pixwin	*pw ;
boxfill.c:		pw_replrop(pw,x1,ypagelen-y2,dx,dy,PIX_SRC & PIX_DST | PIX_COLOR(pencolor),igl_pr_pat,0,0);
boxfill.c:		pw_replrop(pw,x1,ypagelen-y2,dx,dy,PIX_SRC & PIX_DST | PIX_COLOR(pencolor),igl_pr_pat,0,0);
boxfill.c:		pw_replrop(pw,x1,ypagelen-y2,dx,dy,PIX_SRC ^ PIX_DST | PIX_COLOR(pencolor),igl_pr_pat,0,0);
boxfill.c:		pw_replrop(pw,x1,ypagelen-y2,dx,dy,PIX_SRC ^ PIX_DST | PIX_COLOR(pencolor),igl_pr_pat,0,0);
boxfill.c:		pw_replrop(pw,x1,ypagelen-y2,dx,dy,PIX_SRC | PIX_COLOR(pencolor),igl_pr_pat,0,0);
boxfill.c:		pw_replrop(pw,x1,ypagelen-y2,dx,dy,PIX_SRC | PIX_COLOR(pencolor),igl_pr_pat,0,0);
boxfill.c:		pw_replrop(pw,x1,ypagelen-y2,dx,dy,PIX_SRC | PIX_DST | PIX_COLOR(pencolor),igl_pr_pat,0,0);
boxfill.c:		pw_replrop(pw,x1,ypagelen-y2,dx,dy,PIX_SRC | PIX_DST | PIX_COLOR(pencolor),igl_pr_pat,0,0);
boxfill.c:	igl_pr_pat = mem_point(32,32,1,pat);

color.c:extern Pixwin	*pw ;
color.c:	pw_lock(pw,igl_canvas_rect);
color.c:	pw_unlock(pw);
color.c:pw_putcolormap(pw,icol,1,&ur,&ug,&ub);

initcolortable.c:extern Pixwin	*pw ;
initcolortable.c:	pw_lock(pw,igl_canvas_rect);
initcolortable.c:	pw_unlock(pw);
initcolortable.c:pw_putcolormap(pw,0,256,ur,ug,ub);

open_close.c:Pixwin	*pw ;
open_close.c:			pw_setcmsname(pw, "igl_color");
open_close.c:		pw_getcolormap(pw,255,1,&save_red,&save_green,&save_blue);
open_close.c:	pw_batch_off(pw);
open_close.c:	pw_batch_on(pw);
open_close.c:	pw_batch_on(pw);
open_close.c:	pw_lock(pw,igl_canvas_rect);
open_close.c:	pw_lock(pw,igl_canvas_rect); 
open_close.c:	pw_unlock(pw); 
open_close.c:	pw_writebackground(pw,0,0,xpagelen,ypagelen,PIX_SRC | PIX_COLOR(0));
open_close.c:mpr_static(igltool_icon, 64, 64, 1, igl_icon_image);
open_close.c:pw_putcolormap(pw,255,1,&same_red,&same_green,&same_blue);
open_close.c:pw_putcolormap(pw,255,1,&save_red,&save_green,&save_blue);

polygon.c:	Pixrect *igl_pr_pat;
polygon.c:	Pixrect *igl_pr_pat;
polygon.c:extern Pixwin	*pw ;
polygon.c:struct pr_pos *vout;
polygon.c:struct pr_pos *vtemp;
polygon.c:		pw_polygon_2(pw,0,0,new_npoly,nvo,VecList,PIX_SRC & PIX_DST | PIX_COLOR(pencolor),igl_pr_pat,0,0);
polygon.c:		pw_polygon_2(pw,0,0,new_npoly,nvo,VecList,PIX_SRC & PIX_DST | PIX_COLOR(pencolor),igl_pr_pat,0,0);
polygon.c:		pw_polygon_2(pw,0,0,new_npoly,nvo,VecList,PIX_SRC ^ PIX_DST | PIX_COLOR(pencolor),igl_pr_pat,0,0);
polygon.c:		pw_polygon_2(pw,0,0,new_npoly,nvo,VecList,PIX_SRC ^ PIX_DST | PIX_COLOR(pencolor),igl_pr_pat,0,0);
polygon.c:		pw_polygon_2(pw,0,0,new_npoly,nvo,VecList,PIX_SRC | PIX_COLOR(pencolor),igl_pr_pat,0,0);
polygon.c:		pw_polygon_2(pw,0,0,new_npoly,nvo,VecList,PIX_SRC | PIX_COLOR(pencolor),igl_pr_pat,0,0);
polygon.c:		pw_polygon_2(pw,0,0,new_npoly,nvo,VecList,PIX_SRC | PIX_DST | PIX_COLOR(pencolor),igl_pr_pat,0,0);
polygon.c:		pw_polygon_2(pw,0,0,new_npoly,nvo,VecList,PIX_SRC | PIX_DST | PIX_COLOR(pencolor),igl_pr_pat,0,0);
polygon.c:	if ((VecList = (struct pr_pos *)malloc(2*np*sizeof(struct pr_pos))) == NULL) {
polygon.c:	if ((vtemp = (struct pr_pos *)malloc(2*np*sizeof(struct pr_pos))) == NULL) {
polygon.c:	igl_pr_pat = mem_point(32,32,1,pat);
polygon.c:	struct pr_pos *VecList, *pVecList;
polygon.c:	struct pr_pos *pv1, *pv2, *ppv1, *ppv2, *temp;

rastertext.c:	struct pr_pos *pCharBits;
rastertext.c:extern Pixwin   *pw ;
rastertext.c:struct pr_pos CharBits[10000];
rastertext.c:	pw_polypoint(pw,0,0,kount,CharBits,PIX_SRC | PIX_COLOR(pencolor));

sendplot.c:extern Pixwin	*pw ;
sendplot.c:	pw_batch_off(pw);
sendplot.c:	pw_unlock(pw);

vector.c:extern Pixwin	*pw ;
vector.c:	pw_vector (pw, x, ypagelen - y1, x, ypagelen - y2, PIX_SRC | PIX_COLOR(pencolor), 1) ;
vector.c:	pw_vector (pw, x1, ypagelen - y, x2, ypagelen - y, PIX_SRC | PIX_COLOR(pencolor), 1) ;
vector.c:	pw_vector (pw, x1, ypagelen - y1, x2, ypagelen - y2, PIX_SRC | PIX_COLOR(pencolor), 1) ;
vector.c:	pw_vector (pw, xlast, ypagelen - ylast, x, ypagelen - y, PIX_SRC | PIX_COLOR(pencolor), 1) ;
