#include	"../com/global.h"
#include	<stdio.h>
#include	"devpar.h"

#include <xview/scrollbar.h>
#include <xview/notice.h>
#include <xview/cursor.h>
#include <xview/icon.h>
#include <xview/window.h>
#include <xview/xv_xrect.h>
#include <xview/screen.h>

#define	DEFINE
#include "xigl.h"

/* XView datatypes.							*/

Icon		igl_icon;	/* icon for program			*/
Scrollbar	sb1, sb2;	/* horizontal and vertical scrollbars	*/
Xv_Cursor	cursor;		/* cursor				*/


short igl_icon_bits[] = {
#include "igltool.icon"
};

int pencolor;
unsigned char save_red,   save_green,   save_blue,
              same_red=0, same_green=0, same_blue=1;

/* device specifications */
extern float	pixinch	;
extern float	inchpix	;
extern int	xmax	;
extern int	ymax	;
extern int	xpagelen;
extern int	ypagelen;
extern float	xscale  ;
extern float	yscale  ;
extern int	xorigin ;
extern int	yorigin ;
extern int	colordev;

extern int	bw_only;

static int	visible = 1;

int screen_width;
int screen_height;

void
canvas_repaint_proc (canvas, paint_window, display, canvas_xid, xrects)
Canvas canvas;
Xv_Window paint_window;
Display *display;
Window canvas_xid;
Xv_xrectlist *xrects;
    {
	debug ("entering canvas_repaint_proc...\n");
	XCopyArea (display, xid, canvas_xid, gc, 
		   0, ypagelen-screen_height, 
		   xpagelen, ypagelen,
		   0, 0);
	debug ("leaving canvas_repaint_proc...\n");
    }

void
canvas_resize_proc (canvas, width, height)
Canvas canvas;
int width;
int height;
    {
	debug ("entering canvas_resize_proc...\n");
	screen_width = width;
	screen_height = height;
	debug ("leaving canvas_resize_proc...\n");
    }

void
igl_event_proc(win,event,arg)

Xv_Window win;
Event *event;
caddr_t arg;
   {
	static long last_x, last_y;

	debug ("entering igl_event_proc...\n");
	if (event_is_ascii(event)) {
	}
	else switch (event_action(event)) {

	case LOC_DRAG:
/*::
		if (xv_get(canvas,WIN_EVENT_STATE,MS_LEFT)) {
			scrollbar_scroll_to(sb1, last_y - event_y(event) +
				scrollbar_get(sb1,SCROLL_VIEW_START));
			scrollbar_scroll_to(sb2, last_x - event_x(event) +
				scrollbar_get(sb2,SCROLL_VIEW_START));

		}
::*/
		break;
	case MS_LEFT:
		last_x = event_x(event);
		last_y = event_y(event);
		break;

	case MS_MIDDLE:
		xv_destroy_safe(screen_frame);
		break;

	case MS_RIGHT:
		menu_show(igl_menu, win, event, NULL);
		break;
	}
	debug ("leaving igl_event_proc...\n");
   }

void
invisible_proc (menu, item)
Menu menu;
Menu_item item;
{
	debug ("invisible button\n");
}

void
visible_proc (menu, item)
Menu menu;
Menu_item item;
{
	debug ("visible button\n");
}

void
quit_proc (menu, item)
Menu menu;
Menu_item item;
{
	
	xv_destroy_safe(screen_frame);
}

void
next_plot_proc (menu, item)
Menu menu;
Menu_item item;
{
	int more;
	debug ("entering next plot proc...\n");
	more = readcom(stdin,1);
	if (more == 0) menu_set(item,
				MENU_INACTIVE,		TRUE,
				NULL);
	XFillRectangle (display, xid , gc, 0, 0, xpagelen, ypagelen);
	debug ("leaving next plot proc...\n");
}

opendev()
   {
	int		screen_number;
	Xv_Screen	xv_screen;

	/* Get desired size of window.				*/
	if (get_fb_dim (&screen_width, &screen_height) != 0) {	
		screen_width = SCREEN_WIDTH;
		screen_height = SCREEN_HEIGHT;
	}
	debug ("entering opendev...\n");
	pixinch  *= (float) screen_width / (float) SCREEN_WIDTH;
	inchpix   = 1.0 / pixinch;
	xpagelen *= pixinch / PIXINCH;
	ypagelen *= pixinch / PIXINCH;
	xorigin  *= pixinch / PIXINCH;
	yorigin  *= pixinch / PIXINCH;
	xscale   *= pixinch / PIXINCH;
	yscale   *= pixinch / PIXINCH;
	xmax     *= pixinch / PIXINCH;
	ymax     *= pixinch / PIXINCH;

	/* Create icon for program.					*/

/*::
	igl_icon_image = (Server_image)
		xv_create (NULL, SERVER_IMAGE,
			   XV_WIDTH,	64,
			   XV_HEIGHT,	64,
			   SERVER_IMAGE_BITS,	igl_icon_bits,
			   NULL);
	igl_icon = (Icon)xv_create(NULL, ICON_IMAGE, igl_icon_image, NULL);
::*/
	/* Create base frame, scrollbars, and canvas.			*/

	screen_frame = xv_create (NULL, FRAME,
				  XV_WIDTH, 		screen_width,
				  XV_HEIGHT, 		screen_height,
/*::
				  FRAME_ICON,		igl_icon, 
::*/
				  NULL) ;

	sb1 = xv_create(screen_frame, SCROLLBAR, 
			SCROLLBAR_DIRECTION, SCROLLBAR_VERTICAL,
			NULL);
	sb2 = xv_create(screen_frame, SCROLLBAR, 
			SCROLLBAR_DIRECTION, SCROLLBAR_HORIZONTAL,
			NULL);

	canvas = xv_create (screen_frame, CANVAS, 
			    CANVAS_REPAINT_PROC,	canvas_repaint_proc,
			    CANVAS_RESIZE_PROC,		canvas_resize_proc,
			    CANVAS_X_PAINT_WINDOW,	TRUE,
			    CANVAS_AUTO_SHRINK, 	FALSE,
			    CANVAS_WIDTH, 		xpagelen,
			    CANVAS_HEIGHT, 		ypagelen,
			    WIN_DYNAMIC_VISUAL,		TRUE,
			    WIN_VERTICAL_SCROLLBAR,	sb1,
			    WIN_HORIZONTAL_SCROLLBAR,	sb2,
			    WIN_EVENT_PROC,		igl_event_proc,
			    WIN_CONSUME_EVENTS,		
				WIN_ASCII_EVENTS,
				WIN_MOUSE_BUTTONS,
				NULL,
			    NULL) ;

	/* Get information to create graphics context and colormap.	*/

	display = (Display *) xv_get (screen_frame, XV_DISPLAY);
	xv_screen =  (Xv_Screen) XV_SCREEN_FROM_WINDOW (screen_frame);
	screen_number =(int) xv_get (xv_screen, SCREEN_NUMBER);
	xscreen = XScreenOfDisplay (display, screen_number);

	depth = XDefaultDepthOfScreen (xscreen);
	if ( (depth > 1) && (!bw_only) ) {
		colordev = 1;
		pencolor = 1;
		ncolors = (int)exp2(depth);
		ncolors = (ncolors > 256) ? 256 : ncolors;
/*::
		cms = (Cms)xv_create( canvas, CMS,
				     CMS_SIZE, ncolors,
				     NULL);
::*/
	}
	else {
		colordev = 0;
		pencolor = 1;
		ncolors = 2;
	}

	/* Create a pixmap into which we can draw. 			*/
	/* We will draw into this pixmap, and then copy it to the	*/
	/* canvas when it becomes exposed.  Otherwise, we have to	*/
	/* be able to recreate the picture when window damage occurs.	*/


	canvas_xid = (Window) xv_get(canvas_paint_window(canvas), XV_XID);
/*::
	canvas_xid = (Window) xv_get(screen_frame, XV_XID);
::*/
	xid = XCreatePixmap (display, canvas_xid, 
				     xpagelen, ypagelen, depth);


	/* Create graphics context for our writeable pixmap.		*/

	gc_val.foreground = ncolors-1;
	gc_val.background = 0;
	gc = XCreateGC (display, xid, GCForeground | GCBackground,
			&gc_val);

	/* Create basic IGL menu.					*/

	igl_menu = menu_create(
		MENU_ACTION_ITEM,	"visible",	visible_proc,
		MENU_ACTION_ITEM,	"invisible",	invisible_proc,
		MENU_ACTION_ITEM,	"next plot",	next_plot_proc,
		MENU_ACTION_ITEM,	"quit",		quit_proc,
		0);

	NextPlot_Item = menu_get(igl_menu, MENU_NTH_ITEM, 3);

	debug ("leaving opendev...\n");
   }

closedev()
   {
	
	debug ("entering closedev...\n");
	xv_destroy_safe(screen_frame);
	debug ("leaving closedev...\n");
   }

erase() {}

