#include <xview/xview.h>
#include <xview/canvas.h>
#include "devpar.h"
#include	"../com/global.h"
#include	"../../h/igl.h"

/*
 * ../com/readcom.c should be modified so that the window values are
 * set by subroutine.  This way, a device, such as a sun display, that
 * knows about windowing can window automatically via a primitive call.
 */

extern int ixwmin, ixwmax, iywmin, iywmax;
extern int ypagelen;

struct Xpoint	*vtemp;

polyfilln(npoly,nverts,verts)
int npoly, *nverts;
struct intpolygon **verts;
   {
	int n;
	int np;
	struct intpolygon *p;
	struct XPoint *VecList, *pVecList;
	int fillwhite = 0;
        extern int patterns[][32];
	extern int brushmode, brushpat;
	extern int pencolor;
	short *pat;
	Pixrect *igl_pr_pat;
	int fix_n, nvo[1000], *pnv, new_npoly;

	np= 0;
	for(n=0; n<npoly; n++) np += nverts[n];
	if ((VecList = (struct Xpoint *)
			malloc(2*np*sizeof(struct Xpoint))) == NULL) {
		err(WARN,"cannot allocate memory in poly size = %d",np);
		return(-1);
	}
	if ((vtemp = (struct Xpoint *)
			malloc(2*np*sizeof(struct Xpoint))) == NULL) {
		err(WARN,"cannot allocate memory in poly size = %d",np);
		return(-1);
	}
	pVecList = VecList;
	pnv = nvo;
	new_npoly = 0;
	for (n=0; n<npoly; n++) {
		p = verts[n];
		fix_n = fix_verts(p,pVecList,nverts[n]);
		if (fix_n > 2) {
			new_npoly++;
			*pnv++ = fix_n;
			pVecList += fix_n;
		}
	}

 	if (brushmode==FILL_BRWHITE){
		pat = 0;  		/* white fill */
		fillwhite = 1;
		brushmode = FILL_EQU;
	}

	pat = (short *) patterns[brushpat];  
	igl_pr_pat = mem_point(32,32,1,pat);

	switch(brushmode) {

	case FILL_OR:
		XFillPolygon (display, xid, gc, 
		pw_polygon_2(pw,0,0,new_npoly,nvo,VecList,PIX_SRC | PIX_DST | PIX_COLOR(pencolor),igl_pr_pat,0,0);
		break;
	case FILL_XOR:
		pw_polygon_2(pw,0,0,new_npoly,nvo,VecList,PIX_SRC ^ PIX_DST | PIX_COLOR(pencolor),igl_pr_pat,0,0);
		break;
	case FILL_AND:
		pw_polygon_2(pw,0,0,new_npoly,nvo,VecList,PIX_SRC & PIX_DST | PIX_COLOR(pencolor),igl_pr_pat,0,0);
		break;
	case FILL_EQU:
		pw_polygon_2(pw,0,0,new_npoly,nvo,VecList,PIX_SRC | PIX_COLOR(pencolor),igl_pr_pat,0,0);
		if (fillwhite) {
			brushmode = FILL_BRWHITE;
			fillwhite = 0;				
		}
		break;
	}

	free(VecList);
	free(vtemp);
	return(0);
}

polyfill(nvert,verts)
int nvert;
struct intpolygon *verts;
{
	return(polyfilln(1,&nvert,&verts));
}

sympolyfill(nvert,verts)
int nvert;
struct intpolygon *verts;
{
	return(polyfilln(1,&nvert,&verts));
}

int
fix_verts(vin,vout,nv)
int nv;
struct XPoint *vout;
struct intpolygon *vin;
{
	int i, nvout;
	struct XPoint *pv1, *pv2, *ppv1, *ppv2, *temp;

	if (nv < 3) return(nv);

	ppv1 = pv1 = vout;
	ppv2 = pv2 = vtemp;
	for (i=0; i<nv; i++) {
		ppv1->x = vin->ixv;
		ppv1->y = vin->iyv;
		ppv1++;   vin++;
	}

	/* TOP */
	nvout = 0;
	ppv1 = pv1;
	ppv2 = pv2;
	for (i=0; i<nv-1; i++, ppv1++) {
		if (ppv1->x <= ixwmax) {
			ppv2->x = ppv1->x;
			ppv2->y = ppv1->y;
			ppv2++;   nvout++;
		}
		if ((ppv1->x - ixwmax) * (ppv1[1].x - ixwmax) < 0) {
			ppv2->x = ixwmax;
			ppv2->y = ppv1->y + (ppv1[1].y - ppv1->y)
				* (ixwmax - ppv1->x) / (ppv1[1].x - ppv1->x);
			ppv2++;   nvout++;
		}
	}
	if (ppv1->x <= ixwmax) {
		ppv2->x = ppv1->x;
		ppv2->y = ppv1->y;
		ppv2++;   nvout++;
	}
	if ((ppv1->x - ixwmax) * (pv1->x - ixwmax) < 0) {
		ppv2->x = ixwmax;
		ppv2->y = ppv1->y + (pv1->y - ppv1->y)
			* (ixwmax - ppv1->x) / (pv1->x - ppv1->x);
		ppv2++;   nvout++;
	}
	nv = nvout;
	temp = pv1; pv1 = pv2; pv2 = temp;
	/* RIGHT */
	nvout = 0;
	ppv1 = pv1;
	ppv2 = pv2;
	for (i=0; i<nv-1; i++, ppv1++) {
		if (ppv1->y <= iywmax) {
			ppv2->x = ppv1->x;
			ppv2->y = ppv1->y;
			ppv2++;   nvout++;
		}
		if ((ppv1->y - iywmax) * (ppv1[1].y - iywmax) < 0) {
			ppv2->y = iywmax;
			ppv2->x = ppv1->x + (ppv1[1].x - ppv1->x)
				* (iywmax - ppv1->y) / (ppv1[1].y - ppv1->y);
			ppv2++;   nvout++;
		}
	}
	if (ppv1->y <= iywmax) {
		ppv2->x = ppv1->x;
		ppv2->y = ppv1->y;
		ppv2++;   nvout++;
	}
	if ((ppv1->y - iywmax) * (pv1->y - iywmax) < 0) {
		ppv2->y = iywmax;
		ppv2->x = ppv1->x + (pv1->x - ppv1->x)
			* (iywmax - ppv1->y) / (pv1->y - ppv1->y);
		ppv2++;   nvout++;
	}
	nv = nvout;
	temp = pv1; pv1 = pv2; pv2 = temp;
	/* BOTTOM */
	nvout = 0;
	ppv1 = pv1;
	ppv2 = pv2;
	for (i=0; i<nv-1; i++, ppv1++) {
		if (ppv1->x >= ixwmin) {
			ppv2->x = ppv1->x;
			ppv2->y = ppv1->y;
			ppv2++;   nvout++;
		}
		if ((ppv1->x - ixwmin) * (ppv1[1].x - ixwmin) < 0) {
			ppv2->x = ixwmin;
			ppv2->y = ppv1->y + (ppv1[1].y - ppv1->y)
				* (ixwmin - ppv1->x) / (ppv1[1].x - ppv1->x);
			ppv2++;   nvout++;
		}
	}
	if (ppv1->x >= ixwmin) {
		ppv2->x = ppv1->x;
		ppv2->y = ppv1->y;
		ppv2++;   nvout++;
	}
	if ((ppv1->x - ixwmin) * (pv1->x - ixwmin) < 0) {
		ppv2->x = ixwmin;
		ppv2->y = ppv1->y + (pv1->y - ppv1->y)
			* (ixwmin - ppv1->x) / (pv1->x - ppv1->x);
		ppv2++;   nvout++;
	}
	nv = nvout;
	temp = pv1; pv1 = pv2; pv2 = temp;
	/* LEFT */
	nvout = 0;
	ppv1 = pv1;
	ppv2 = pv2;
	for (i=0; i<nv-1; i++, ppv1++) {
		if (ppv1->y >= iywmin) {
			ppv2->x = ppv1->x;
			ppv2->y = ppv1->y;
			ppv2++;   nvout++;
		}
		if ((ppv1->y - iywmin) * (ppv1[1].y - iywmin) < 0) {
			ppv2->y = iywmin;
			ppv2->x = ppv1->x + (ppv1[1].x - ppv1->x)
				* (iywmin - ppv1->y) / (ppv1[1].y - ppv1->y);
			ppv2++;   nvout++;
		}
	}
	if (ppv1->y >= iywmin) {
		ppv2->x = ppv1->x;
		ppv2->y = ppv1->y;
		ppv2++;   nvout++;
	}
	if ((ppv1->y - iywmin) * (pv1->y - iywmin) < 0) {
		ppv2->y = iywmin;
		ppv2->x = ppv1->x + (pv1->x - ppv1->x)
			* (iywmin - ppv1->y) / (pv1->y - ppv1->y);
		ppv2++;   nvout++;
	}

	/* vout currently points in pv2.  now put in sun coords */
	for (i=0; i<nvout; i++, vout++) vout->y = ypagelen - vout->y;
	return(nvout);
}
